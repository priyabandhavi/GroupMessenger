package edu.buffalo.cse.cse486586.groupmessenger2;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Context;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.telephony.TelephonyManager;
import android.text.method.ScrollingMovementMethod;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.EditText;
import android.widget.TextView;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.UUID;

/**
 * GroupMessengerActivity is the main Activity for the assignment.
 * 
 * @author stevko
 *
 */
public class GroupMessengerActivity extends Activity {


    static final String TAG = GroupMessengerActivity.class.getSimpleName();
    static int[] seqvector;
    String myPort;

    static final String REMOTE_PORT0 = "11108";
    static final String REMOTE_PORT1 = "11112";
    static final String REMOTE_PORT2 = "11116";
    static final String REMOTE_PORT3 = "11120";
    static final String REMOTE_PORT4 = "11124";

    private static final String KEY_FIELD = "key";
    private static final String VALUE_FIELD = "value";

    static final int SERVER_PORT = 10000;
    static final String[] REMOTE_PORTS = {"11108", "11112", "11116", "11120", "11124"};



    private final Uri mUri = buildUri("content", "edu.buffalo.cse.cse486586.groupmessenger2.provider");


    private Uri buildUri(String scheme, String authority) {
        Uri.Builder uri = new Uri.Builder();
        uri.authority(authority);
        uri.scheme(scheme);
        return uri.build();
    }



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_group_messenger);

        /*
         * TODO: Use the TextView to display your messages. Though there is no grading component
         * on how you display the messages, if you implement it, it'll make your debugging easier.
         */


        TelephonyManager tel = (TelephonyManager) this.getSystemService(Context.TELEPHONY_SERVICE);         //REFERENCE:PA1
        String portStr = tel.getLine1Number().substring(tel.getLine1Number().length() - 4);
        myPort = String.valueOf((Integer.parseInt(portStr) * 2));


        TextView tv = (TextView) findViewById(R.id.textView1);
        tv.setMovementMethod(new ScrollingMovementMethod());
        
        /*
         * Registers OnPTestClickListener for "button1" in the layout, which is the "PTest" button.
         * OnPTestClickListener demonstrates how to access a ContentProvider.
         */
        findViewById(R.id.button1).setOnClickListener(
                new OnPTestClickListener(tv, getContentResolver()));
        
        /*
         * TODO: You need to register and implement an OnClickListener for the "Send" button.
         * In your implementation you need to get the message from the input box (EditText)
         * and send it to other AVDs.
         *
         */

        final EditText edt = (EditText) findViewById(R.id.editText1);
        findViewById(R.id.button4).setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View view) {
                        String msg = edt.getText().toString() + "\n";
                        //edt.setText("");
                        new ClientTask().executeOnExecutor(AsyncTask.SERIAL_EXECUTOR, msg, myPort);
                    }
                });

        try {

            ServerSocket serverSocket = new ServerSocket(SERVER_PORT);                           //REFERENCE PA1
            new ServerTask().executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR, serverSocket);
        } catch (IOException e) {
            Log.e(TAG, "Can't create a ServerSocket");
            return;
        }

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.activity_group_messenger, menu);
        return true;
    }


    private class ServerTask extends AsyncTask<ServerSocket, String, Void> {

        //private HashMap<Integer, PriorityQueue<Msg_MsgId>> processorMsgsList = new HashMap<Integer, PriorityQueue<Msg_MsgId>>();
       //private HashMap<String, Integer> Msgid_Seqno = new HashMap<String, Integer>();




        private PriorityQueue<Seqno_MsgId> proposed_seqsort= new PriorityQueue<Seqno_MsgId>(5, Collections.reverseOrder());
        private HashMap<String, PriorityQueue<Seqno_MsgId>> msgid_seqsort = new HashMap<String, PriorityQueue<Seqno_MsgId>>();
        private HashMap<String, String> Msg_msgid = new HashMap<String, String>();
        private PriorityQueue<Msg_MsgId> m = new PriorityQueue<Msg_MsgId>();

        Socket socket = null;


        private final Uri mUri = buildUri("content", "edu.buffalo.cse.cse486586.groupmessenger2.provider");


        private Uri buildUri(String scheme, String authority) {
            Uri.Builder uri = new Uri.Builder();
            uri.authority(authority);
            uri.scheme(scheme);
            return uri.build();
        }

        @Override
        protected Void doInBackground(ServerSocket... serverSockets) {
            int count = -1;
            int seq = 0;
            ServerSocket server_socket = serverSockets[0];

            while(true) {
                try {
                    socket = server_socket.accept();
                    InputStream is = socket.getInputStream();
                    ObjectInputStream ois = new ObjectInputStream(is);
                    Object incoming_msg = ois.readObject();

                    while (true) {
                        if (incoming_msg instanceof Msg_MsgId) {
                            Msg_MsgId message = (Msg_MsgId) incoming_msg;
                            message.setSeqno(seq);
                            ProposeSqIdAndMsg(message.getMsgId(), seq, message.getPIdx());
                            seq++;
                            m.add(message);
                            publishProgress(message.getMsg());
                        } else if (incoming_msg instanceof Seqno_MsgId) {

                            Seqno_MsgId s = (Seqno_MsgId) incoming_msg;
                            proposed_seqsort.add(s);
                            msgid_seqsort.put(s.getMsgId(), proposed_seqsort);

                            if (proposed_seqsort.size() == 5) {
                                Seqno_MsgId final_value = proposed_seqsort.peek();
                                mCastSqIdAndMsg(final_value.getMsgId(), final_value.getSq_id(), final_value.getProcess_id());

                            }
                        } else {

                            AgreedSeqno_msgid a = (AgreedSeqno_msgid) incoming_msg;
                            Iterator ir = m.iterator();
                            while(ir.hasNext()){
                                Msg_MsgId stored_msg = (Msg_MsgId) ir.next();
                                if(stored_msg.getMsgId()==a.get_msgid()){
                                    m.remove(stored_msg);
                                    stored_msg.setSeqno(a.getAgreed_seqno());
                                    m.add(stored_msg);


                                }



                                while(m!= null){

                                    Msg_MsgId mm = m.peek();
                                    String msg_deliver = mm.getMsg();
                                    m.poll();
                                    count++;
                                  insertSq_noAndMsg(count,msg_deliver);
                                }



                            }


                        }

















                                   /* m.add(message);
                                    processorMsgsList.put(seq, m);*/





                    }
                }



                catch (IOException e) {
                    Log.v(TAG,"error at server");
                } catch (ClassNotFoundException e) {
                    Log.v(TAG, "error at socket");
                }
            }




        }

        protected void onProgressUpdate(String...strings) {
            /*
             * The following code displays what is received in doInBackground().
             */

                String strReceived =  strings[0].trim();


            TextView tv = (TextView) findViewById(R.id.textView1);

            tv.append(strReceived + "\t\n");

            return;
        }

    }


    private class ClientTask extends AsyncTask<String, Void, Void> {

        private int process_id;

        @Override
        protected Void doInBackground(String... msgs) {

            String msgToSend = msgs[0];
            String id = UUID.randomUUID().toString();


            process_id = (Integer.parseInt(myPort) - 11108) / 4;
            Msg_MsgId msgIdMsg = new Msg_MsgId(id, msgToSend);
            msgIdMsg.setMsg(msgToSend);
            msgIdMsg.setMsgId(id);
            msgIdMsg.setPIdx(process_id);


            for (int i = 0; i < REMOTE_PORTS.length; i++) {
                try {

                    String remotePort = REMOTE_PORTS[i];
                    Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                            Integer.parseInt(remotePort));

                    OutputStream output = socket.getOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(output);

                    oos.writeObject(msgIdMsg);
                    oos.close();
                    output.close();

                    socket.close();


                } catch (UnknownHostException e) {
                    Log.v(TAG, "ClientTask UnknownHostException");
                } catch (IOException e) {
                    Log.v(TAG, "ClientTask socket IOException");
                }
            }
            return null;
        }
    }


    private boolean insertSq_noAndMsg(int sq_no, String msg) {
        try {

            ContentValues cv = new ContentValues();
            cv.put(KEY_FIELD, String.valueOf(sq_no));
            cv.put(VALUE_FIELD, msg);
            getContentResolver().insert(mUri, cv);
        } catch (Exception e) {
            Log.e(TAG, e.toString());
            return false;
        }

        return true;
    }


    private void ProposeSqIdAndMsg(String msgid, int seq, int process){

        Seqno_MsgId s = new Seqno_MsgId(seq, msgid);
        s.setMsgId(msgid);
        s.setSq_id(seq);
        int PROCESS = process;

            try {
                String remotePort = REMOTE_PORTS[PROCESS];
                Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                        Integer.parseInt(remotePort));

                OutputStream os = socket.getOutputStream();
                ObjectOutputStream oos = new ObjectOutputStream(os);
                oos.writeObject(s);
                oos.close();
                os.close();

                socket.close();
            } catch (UnknownHostException e) {
                Log.v(TAG, "ClientTask UnknownHostException");
            } catch (IOException e) {
                Log.v(TAG, "ClientTask socket IOException");
            }


    }



    private void mCastSqIdAndMsg(String msgid, int seq, int process){

        AgreedSeqno_msgid s = new AgreedSeqno_msgid(msgid,seq, process);
        s.set_msgid(msgid);
        s.setAgreed_seqno(seq);
        s.set_process(process);




      for(int i = 0; i<REMOTE_PORTS.length; i++){
          try {
              String remotePort = REMOTE_PORTS[process];
              Socket socket = new Socket(InetAddress.getByAddress(new byte[]{10, 0, 2, 2}),
                      Integer.parseInt(remotePort));

              OutputStream os = socket.getOutputStream();
              ObjectOutputStream oos = new ObjectOutputStream(os);
              oos.writeObject(s);
              oos.close();
              os.close();

              socket.close();
          } catch (UnknownHostException e) {
              Log.e(TAG, "ClientTask UnknownHostException", e);
          } catch (IOException e) {
              Log.e(TAG, "ClientTask socket IOException", e );
          }
      }



    }


}


